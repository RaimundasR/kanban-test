name: Mark issue as awaiting response on comment

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  repository-projects: write

jobs:
  mark_awaiting:
    runs-on: ubuntu-latest
    steps:
      - name: Add label and set project status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const repo = context.repo.repo;
            const owner = context.repo.owner;

            // Add label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: issue.number,
              labels: ['awaiting-response']
            });

            // Get your project (user-owned, project #8)
            const { user } = await github.graphql(`
              query {
                user(login: "RaimundasR") {
                  projectV2(number: 8) {
                    id
                  }
                }
              }
            `);

            const projectId = user.projectV2.id;

            // Find project item for the issue
            const itemRes = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const item = itemRes.node.items.nodes.find(i => i.content?.number === issue.number);
            if (!item) throw new Error("Issue not found in project");

            const itemId = item.id;

            // Get "Status" field and find "Awaiting Response" option
            const fieldData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const statusField = fieldData.node.fields.nodes.find(f => f.name === "Status");
            if (!statusField) throw new Error("Status field not found");

            const option = statusField.options.find(opt => opt.name === "Awaiting Response");
            if (!option) throw new Error('"Awaiting Response" option not found');

            // Set project status
            await github.graphql(`
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              input: {
                projectId,
                itemId,
                fieldId: statusField.id,
                value: { singleSelectOptionId: option.id }
              }
            });
