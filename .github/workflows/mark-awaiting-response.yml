name: Mark issue as awaiting response on comment

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  repository-projects: write

jobs:
  mark_awaiting:
    runs-on: ubuntu-latest
    steps:
      - name: Add label and set project status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const repo = context.repo.repo;
            const owner = context.repo.owner;

            // 1. Add the label
            await github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: issue.number,
              labels: ['awaiting-response']
            });

            // 2. Use known Project ID (from GraphQL explorer)
            const projectId = "PVT_kwHOAhzzDs4A4YZb";

            // 3. Try to find the issue in the project
            const itemRes = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            let item = itemRes.node.items.nodes.find(i => i.content?.number === issue.number);

            // 4. If not found, add the issue to the project
            if (!item) {
              const added = await github.graphql(`
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId,
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `, {
                projectId,
                contentId: issue.node_id
              });

              item = { id: added.addProjectV2ItemById.item.id };
            }

            const itemId = item.id;

            // 5. Get all fields for the project
            const fieldData = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 50) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            // 6. Find "Status" field and "Awaiting Response" option
            const statusField = fieldData.node.fields.nodes.find(f => f.name === "Status");
            if (!statusField) throw new Error("Status field not found");

            const option = statusField.options.find(opt => opt.name === "Awaiting Response");
            if (!option) throw new Error('"Awaiting Response" option not found');

            // 7. Update the field value for this issue
            await github.graphql(`
              mutation($input: UpdateProjectV2ItemFieldValueInput!) {
                updateProjectV2ItemFieldValue(input: $input) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              input: {
                projectId,
                itemId,
                fieldId: statusField.id,
                value: {
                  singleSelectOptionId: option.id
                }
              }
            });
